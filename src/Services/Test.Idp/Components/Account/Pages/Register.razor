@page "/Account/Register"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Test.Idp.Data.Models
@using Test.Idp.Components.Account.Shared

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger
@inject IUserStore<ApplicationUser> UserStore

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<StatusMessage Message="@Message"/>
<EditForm Model="Input" FormName="register" method="post" OnValidSubmit="RegisterUserAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div>
        <InputText @bind-value="Input.Email" id="Input.Email" autocomplete="username" aria-required="true"
                   placeholder="name@example.com"/>
        <label for="Input.Email">Email</label>
        <ValidationMessage For="() => Input.Email"/>
    </div>
    <div>
        <InputText type="password" @bind-value="Input.Password" id="Input.Password" autocomplete="new-password"
                   aria-required="true" placeholder="password"/>
        <label for="Input.Password">Password</label>
        <ValidationMessage For="()=>Input.Password"/>
    </div>
    <div>
        <InputText type="password" @bind-value="Input.ConfirmPassword" id="Input.ConfirmPassword"
                   autocomplete="new-password" aria-required="true" placeholder="password"/>
        <label for="Input.ConfirmPassword">Confirm Password</label>
        <ValidationMessage For="()=>Input.ConfirmPassword"/>
    </div>
    <div>
        <InputText @bind-value="Input.FavoriteColor" id="Input.FavoriteColor" aria-required="true"
                   placeholder="yellow"/>
        <label for="Input.FavoriteColor">Favorite Color</label>
        <ValidationMessage For="()=>Input.FavoriteColor"/>
    </div>
    <div>
        <button type="submit">Register</button>
    </div>
</EditForm>
<ExternalLoginPicker/>

@code{
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    private async Task RegisterUserAsync()
    {
        var user = CreateUser();
        var emailStore = GetEmailStore();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.FavoriteColor = Input.FavoriteColor;

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            _identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new profile with password");

        var userId = await UserManager.GetUserIdAsync(user);
        // TODO: Email verification
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
            throw new InvalidOperationException("A user store with email support is required.");
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private static ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Couldn't create instance of '{nameof(ApplicationUser)}'");
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Compare(nameof(Password))]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required]
        [Display(Name = "Favorite color")]
        public string FavoriteColor { get; set; } = string.Empty;
    }

}