@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Test.Idp.Data.Models
@using Test.Idp.Components.Account.Shared

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<StatusMessage Message="@_errorMessage"/>
<EditForm Model="Input" method="post" FormName="login" OnValidSubmit="LoginUserAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div>
        <InputText @bind-value="Input.Email" id="Input.Email" aria-required="true" autocomplete="username"
                   placeholder="name@example.com"/>
        <label for="Input.Email">Email</label>
        <ValidationMessage For="()=>Input.Email"/>
    </div>
    <div>
        <InputText type="password" @bind-value="Input.Password" id="Input.Password" aria-required="true"
                   autocomplete="current-password" placeholder="password"/>
        <label for="Input.Password">Password</label>
        <ValidationMessage For="()=>Input.Password"/>
    </div>
    <div>
        <label>
            <InputCheckbox @bind-value="Input.RememberMe"/>
            Remember me
        </label>
    </div>
    <div>
        <button type="submit">Login</button>
    </div>
    <div>
        <p>
            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register
                as a new user</a>
        </p>
    </div>
</EditForm>
<ExternalLoginPicker/>

@code{
    private string? _errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
    }

    private async Task LoginUserAsync()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            _errorMessage = "Error: Invalid login attempt";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}