@page "/Account/ExternalLogin"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using Test.Idp.Data.Models
@using Test.Idp.Components.Account.Shared

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IUserStore<ApplicationUser> UserStore
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject ILogger<ExternalLogin> Logger

<PageTitle>Register</PageTitle>

<StatusMessage Message="@_message"/>
<h1>Register</h1>
<h2>Associate your @ProviderDisplayName account</h2>

<EditForm Model="Input" FormName="confirmation" method="post" OnValidSubmit="OnValidSubmitAsync">
    <div>
        <InputText @bind-value="Input.Email" id="Input.Email" autocomplete="username" placeholder="name@example.com"/>
        <label for="Input.Email">Email</label>
        <ValidationMessage For="()=>Input.Email"/>
    </div>
    <div>
        <InputText @bind-value="Input.FavoriteColor" id="Input.FavoriteColor" placeholder="yellow"/>
        <label for="Input.FavoriteColor">Favorite Color</label>
        <ValidationMessage For="()=>Input.FavoriteColor"/>
    </div>
    <div>
        <button type="submit">Register</button>
    </div>
</EditForm>

@code{

    public const string LoginCallbackAction = "LoginCallback";

    private string? _message;
    private ExternalLoginInfo? _externalLoginInfo;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private string? RemoteError { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    private string? ProviderDisplayName => _externalLoginInfo?.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
            RedirectManager.RedirectToWithStatus("Account/Login", "Error external login information", HttpContext);

        _externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        if (_externalLoginInfo is null)
            RedirectManager.RedirectToWithStatus("Account/Login", "Error external login information", HttpContext);

        var result = await SignInManager.ExternalLoginSignInAsync(
            _externalLoginInfo.LoginProvider,
            _externalLoginInfo.ProviderKey,
            false,
            true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider",
                _externalLoginInfo.Principal.Identity?.Name,
                _externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }

        // User not known (yet)
        if (_externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
            Input.Email = _externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? string.Empty;
    }

    private async Task OnValidSubmitAsync()
    {
        if (_externalLoginInfo is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information during confirmation.", HttpContext);
        }

        var emailStore = GetEmailStore();
        var user = CreatUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        user.FavoriteColor = Input.FavoriteColor;

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, _externalLoginInfo);
            if (result.Succeeded)
            {
                Logger.LogInformation("User created an account using {Name} provider", _externalLoginInfo.LoginProvider);

                var userId = await UserManager.GetUserIdAsync(user);
                // TODO: email verification

                await SignInManager.SignInAsync(user, isPersistent: false, _externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        _message = $"Error: {string.Join(", ", result.Errors.Select(error => error.Description))}";
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
            throw new InvalidOperationException("A user store with email support is required.");
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private static ApplicationUser CreatUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Couldn't create instance of '{nameof(ApplicationUser)}'");
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = string.Empty;

        [Required] public string FavoriteColor { get; set; } = string.Empty;
    }

}